[
["index.html", "Data Science With Python Chapter 1 Prerequisites", " Data Science With Python L A Liggett 2019-06-08 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandocâ€™s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. And this is some other random stuff. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa knitr::include_graphics(rep(&quot;knit-logo.png&quot;, 3)) knitr::include_app(&quot;https://yihui.shinyapps.io/miniUI/&quot;, height = &quot;600px&quot;) import pandas as pd x = &#39;hello, python world!&#39; print(x.split(&#39; &#39;)) ## [&#39;hello,&#39;, &#39;python&#39;, &#39;world!&#39;] You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (???). References "],
["jupyter.html", "Chapter 3 JupyterLab", " Chapter 3 JupyterLab Here is a simple template that I use that controls a couple useful things when starting a new notebook. import sys sys.path.append(&#39;../util&#39;) %reload_ext autoreload %autoreload 2 from util import * import numpy as np import pandas as pd from matplotlib import pyplot as plt import seaborn as sns sns.set_palette(&#39;pastel&#39;) sns.set_style(&#39;ticks&#39;) sns.set_context(&#39;paper&#39;, font_scale=1) It is often convenient to have a notebook automatically refresh the imported libraries so that they can be modified while working on a JupyterLab notebook. %reload_ext autoreload %autoreload 2 To allow directory organization, dependcies can be separated into different directories and imported into a jupyter notebook using the following import statement. import sys sys.path.append(&#39;../util&#39;) A table of contents can be created to refer to each of the headers throughout a notebook in html format. The code is below (Obviously needs to be simplified.) &lt;h1&gt;Table of Contents&lt;span class=&quot;tocSkip&quot;&gt;&lt;/span&gt;&lt;/h1&gt; &lt;div class=&quot;toc&quot;&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt; &lt;span&gt;&lt;a href=&quot;#Python-Setup&quot; data-toc-modified-id=&quot;Python-Setup-1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1&amp;nbsp;&amp;nbsp;&lt;/span&gt;Python Setup&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt; &lt;span&gt;&lt;a href=&quot;#Change-the-width-of-the-page&quot; data-toc-modified-id=&quot;Change-the-width-of-the-page-1.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;Change the width of the page&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;a href=&quot;#Import-packages&quot; data-toc-modified-id=&quot;Import-packages-1.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;Import packages&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;a href=&quot;#Colours&quot; data-toc-modified-id=&quot;Colours-2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2&amp;nbsp;&amp;nbsp;&lt;/span&gt;Colours&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Colour-line-graph&quot; data-toc-modified-id=&quot;Colour-line-graph-2.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;Colour line graph&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Totals-for-studies&quot; data-toc-modified-id=&quot;Totals-for-studies-3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;3&amp;nbsp;&amp;nbsp;&lt;/span&gt;Totals for studies&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Functions-for-calculating-trinucleotide-context-specific-mutation-rates&quot; data-toc-modified-id=&quot;Functions-for-calculating-trinucleotide-context-specific-mutation-rates-4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4&amp;nbsp;&amp;nbsp;&lt;/span&gt;Functions for calculating trinucleotide-context specific mutation rates&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Calculating-mutation-rates-for-individual-variants&quot; data-toc-modified-id=&quot;Calculating-mutation-rates-for-individual-variants-4.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;Calculating mutation rates for individual variants&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A&quot; data-toc-modified-id=&quot;DNMT3A-4.1.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.1.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2&quot; data-toc-modified-id=&quot;TET2-4.1.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.1.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1&quot; data-toc-modified-id=&quot;ASXL1-4.1.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.1.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53&quot; data-toc-modified-id=&quot;TP53-4.1.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.1.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Calculating-mutation-rates-from-a-.csv-file-of-variants&quot; data-toc-modified-id=&quot;Calculating-mutation-rates-from-a-.csv-file-of-variants-4.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;Calculating mutation rates from a .csv file of variants&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A&quot; data-toc-modified-id=&quot;DNMT3A-4.2.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.2.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2&quot; data-toc-modified-id=&quot;TET2-4.2.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.2.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1&quot; data-toc-modified-id=&quot;ASXL1-4.2.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.2.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53&quot; data-toc-modified-id=&quot;TP53-4.2.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.2.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Calculating-mutation-rates-from-a-list-of-variants&quot; data-toc-modified-id=&quot;Calculating-mutation-rates-from-a-list-of-variants-4.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;Calculating mutation rates from a list of variants&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A&quot; data-toc-modified-id=&quot;DNMT3A-4.3.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.3.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2&quot; data-toc-modified-id=&quot;TET2-4.3.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.3.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1&quot; data-toc-modified-id=&quot;ASXL1-4.3.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.3.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53&quot; data-toc-modified-id=&quot;TP53-4.3.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;4.3.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Lists-of-variants-targeted-by-each-study&quot; data-toc-modified-id=&quot;Lists-of-variants-targeted-by-each-study-5&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5&amp;nbsp;&amp;nbsp;&lt;/span&gt;Lists of variants targeted by each study&lt;/a&gt;&lt;/span&gt;&lt;ul class=&quot;toc-item&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Jaiswal-2014&quot; data-toc-modified-id=&quot;Jaiswal-2014-5.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;Jaiswal 2014&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Genovese-2014&quot; data-toc-modified-id=&quot;Genovese-2014-5.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;Genovese 2014&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#McKerrel-2015&quot; data-toc-modified-id=&quot;McKerrel-2015-5.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;McKerrel 2015&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Zink-2017&quot; data-toc-modified-id=&quot;Zink-2017-5.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;Zink 2017&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Coombs-2017&quot; data-toc-modified-id=&quot;Coombs-2017-5.5&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.5&amp;nbsp;&amp;nbsp;&lt;/span&gt;Coombs 2017&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Young-2016-&amp;amp;-2019&quot; data-toc-modified-id=&quot;Young-2016-&amp;amp;-2019-5.6&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.6&amp;nbsp;&amp;nbsp;&lt;/span&gt;Young 2016 &amp;amp; 2019&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Desai-2018&quot; data-toc-modified-id=&quot;Desai-2018-5.7&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.7&amp;nbsp;&amp;nbsp;&lt;/span&gt;Desai 2018&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Acuna-Hidalgo-2017&quot; data-toc-modified-id=&quot;Acuna-Hidalgo-2017-5.8&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;5.8&amp;nbsp;&amp;nbsp;&lt;/span&gt;Acuna-Hidalgo 2017&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Lists-of-all-possible-variants-in-DNMT3A,-TET2,-ASXL1,-TP53&quot; data-toc-modified-id=&quot;Lists-of-all-possible-variants-in-DNMT3A,-TET2,-ASXL1,-TP53-6&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;6&amp;nbsp;&amp;nbsp;&lt;/span&gt;Lists of all possible variants in DNMT3A, TET2, ASXL1, TP53&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A&quot; data-toc-modified-id=&quot;DNMT3A-6.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;6.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2&quot; data-toc-modified-id=&quot;TET2-6.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;6.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1&quot; data-toc-modified-id=&quot;ASXL1-6.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;6.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53&quot; data-toc-modified-id=&quot;TP53-6.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;6.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Actual-number-of-observations-of-each-variant&quot; data-toc-modified-id=&quot;Actual-number-of-observations-of-each-variant-7&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;7&amp;nbsp;&amp;nbsp;&lt;/span&gt;Actual number of observations of each variant&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt; &lt;ul class=&quot;toc-item&quot;&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A&quot; data-toc-modified-id=&quot;DNMT3A-7.0.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;7.0.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2&quot; data-toc-modified-id=&quot;TET2-7.0.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;7.0.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1&quot; data-toc-modified-id=&quot;ASXL1-7.0.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;7.0.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53&quot; data-toc-modified-id=&quot;TP53-7.0.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;7.0.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Functions-for-calculating-the-expected-number-of-observations-of-a-variant&quot; data-toc-modified-id=&quot;Functions-for-calculating-the-expected-number-of-observations-of-a-variant-8&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;8&amp;nbsp;&amp;nbsp;&lt;/span&gt;Functions for calculating the expected number of observations of a variant&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Maximum-Likelihood-Estimation-for-s&quot; data-toc-modified-id=&quot;Maximum-Likelihood-Estimation-for-s-9&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;9&amp;nbsp;&amp;nbsp;&lt;/span&gt;Maximum Likelihood Estimation for s&lt;/a&gt;&lt;/span&gt; &lt;ul class=&quot;toc-item&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#DNMT3A-variants&quot; data-toc-modified-id=&quot;DNMT3A-variants-9.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;9.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;DNMT3A variants&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TET2-variants&quot; data-toc-modified-id=&quot;TET2-variants-9.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;9.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;TET2 variants&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#ASXL1-variants&quot; data-toc-modified-id=&quot;ASXL1-variants-9.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;9.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;ASXL1 variants&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;&lt;a href=&quot;#TP53-variants&quot; data-toc-modified-id=&quot;TP53-variants-9.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;9.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;TP53 variants&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; "],
["visualization.html", "Chapter 4 Visualization 4.1 Color 4.2 Matplotlib 4.3 Seaborn 4.4 Statistics 4.5 Various Plot Styles", " Chapter 4 Visualization 4.1 Color 4.1.1 Colorschemes Seaborn Themes Pastel: {&#39;Blue&#39;:&#39;#a3c6ff&#39;, &#39;Orange&#39;:&#39;#f7ab60&#39;, &#39;Green&#39;:&#39;#60f7a9&#39;, &#39;Red&#39;:&#39;#fc9d94&#39;, &#39;Purple&#39;:&#39;#bea3ff&#39;, &#39;Brown&#39;:&#39;#d1b485&#39;, &#39;Pink&#39;:&#39;#f7afdf&#39;, &#39;Gray&#39;:&#39;#c4c4c4&#39;, &#39;Yellow&#39;:&#39;#ffffaa&#39;, &#39;LBlue&#39;:&#39;#baf6ff&#39;} Deep: {&#39;Green&#39;:&#39;#5baf68&#39;} 4.1.2 Controlling Coloration Not all plots automatically plot with a white background, and when using something dark like jupyterlab or a presentation this can be frustrating. The background color can be set in pyplot like this. fig.patch.set_facecolor(&#39;xkcd:mint green&#39;) When plotting, samples will not always be colored with the same color, especially when different subsets of samples are included in different plots. Here is a manual workaround to specify the coloration of displayed data. This is a bit cumbersome so there might be a more elegant way of achieving the same outcome. # here is an example where sample order is controlled from a pandas DataFrame sample_order = all_vars.sort_values([&#39;ID&#39;]).drop_duplicates([&#39;Sample&#39;]).Sample # the color order is specified here # colors should be in the same order as the above sample_order Series, excluding samples with no data colors = [pastel[&#39;Brown&#39;], pastel[&#39;Blue&#39;], pastel[&#39;Orange&#39;], pastel[&#39;Purple&#39;], pastel[&#39;Green&#39;], pastel[&#39;Red&#39;], ] plt.figure() # this is an example of plotting that uses the sample_order and palette to control coloration order sns.catplot(x=&#39;Sample&#39;, y=&#39;VAF&#39;, hue=&#39;Gene&#39;, jitter=True, data=oncogenic[oncogenic.Location == &#39;Peripheral&#39;], legend=False, order=sample_order, palette=sns.color_palette(colors)) # a colorscheme can be specified if desired pastel = {&#39;Blue&#39;:&#39;#a3c6ff&#39;, &#39;Orange&#39;:&#39;#f7ab60&#39;, &#39;Green&#39;:&#39;#60f7a9&#39;, &#39;Red&#39;:&#39;#fc9d94&#39;, &#39;Purple&#39;:&#39;#bea3ff&#39;, &#39;Brown&#39;:&#39;#d1b485&#39;, &#39;Pink&#39;:&#39;#f7afdf&#39;, &#39;Gray&#39;:&#39;#c4c4c4&#39;, &#39;Yellow&#39;:&#39;#ffffaa&#39;, &#39;LBlue&#39;:&#39;#baf6ff&#39;} # this controls the coloration in the legend import matplotlib.patches as mpatches egfr = mpatches.Patch(color=pastel[&#39;Blue&#39;], label=&#39;EGFR&#39;) pik3ca = mpatches.Patch(color=pastel[&#39;Orange&#39;], label=&#39;PIK3CA&#39;) myc = mpatches.Patch(color=pastel[&#39;Green&#39;], label=&#39;MYC&#39;) plt.legend(handles=[egfr,pik3ca,myc], loc=&#39;upper right&#39;, bbox_to_anchor=(1.5, 1), ncol=1) # no legend overlap 4.2 Matplotlib Plotting a heatmap. import matplotlib.pyplot as plt import numpy as np a = np.random.random((16, 16)) plt.imshow(a, cmap=&#39;RdBu&#39;&#39;, interpolation=&#39;nearest&#39;) plt.show() Possible heatmap colors are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r A simple venn diagram. from matplotlib_venn import venn2 venn2(subsets = (3, 2, 1)) A more complicated venn diagram. from matplotlib import pyplot as plt import numpy as np from matplotlib_venn import venn3, venn3_circles plt.figure(figsize=(4,4)) v = venn3(subsets=(1, 1, 1, 1, 1, 1, 1), set_labels = (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)) v.get_patch_by_id(&#39;100&#39;).set_alpha(1.0) v.get_patch_by_id(&#39;100&#39;).set_color(&#39;white&#39;) v.get_label_by_id(&#39;100&#39;).set_text(&#39;Unknown&#39;) v.get_label_by_id(&#39;A&#39;).set_text(&#39;Set &quot;A&quot;&#39;) c = venn3_circles(subsets=(1, 1, 1, 1, 1, 1, 1), linestyle=&#39;dotted&#39;) c[0].set_lw(1.0) c[0].set_ls(&#39;dotted&#39;) plt.title(&quot;Sample Venn diagram&quot;) plt.annotate(&#39;Unknown set&#39;, xy=v.get_label_by_id(&#39;100&#39;).get_position() - np.array([0, 0.05]), xytext=(-70,-70), ha=&#39;center&#39;, textcoords=&#39;offset points&#39;, bbox=dict(boxstyle=&#39;round,pad=0.5&#39;, fc=&#39;gray&#39;, alpha=0.1), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;, connectionstyle=&#39;arc3,rad=0.5&#39;,color=&#39;gray&#39;)) plt.show() Log scales seem to always be a challenge. Here is at least one solution to change ticks to log manually. y_major_ticks = [np.log(100),np.log(200),np.log(300),np.log(400),np.log(500),np.log(600),np.log(700),np.log(800),np.log(900),\\ np.log(1000),np.log(2000),np.log(3000),np.log(4000),np.log(5000),np.log(6000),np.log(7000),np.log(8000),np.log(9000),\\ np.log(10000),np.log(20000),np.log(30000),np.log(40000),np.log(50000),np.log(60000),np.log(70000),np.log(80000),np.log(90000),\\ np.log(100000),np.log(200000),np.log(300000),np.log(400000),np.log(500000),np.log(600000),np.log(700000),np.log(800000),np.log(900000),\\ np.log(1000000),np.log(2000000),np.log(3000000),np.log(4000000),np.log(5000000),np.log(6000000),np.log(7000000),np.log(8000000),np.log(9000000),\\ np.log(10000000)] y_major_tick_labels = [&quot;100&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;1000&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;10,000&quot;,\\ &quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;100,000&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;1,000,000&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;10,000,000&quot; ] ax1.set_yticks(y_major_ticks) ax1.set_yticklabels(y_major_tick_labels, fontsize = axisfont) ax1.yaxis.set_tick_params(width=scale, color = grey3, length = 6) 4.3 Seaborn Here is a general bar plot that includes some commonly used parameters. # fits my 22 inch monitor plt.figure(figsize=(19.17,11.98)) # order controls the display order of the samples sns.catplot(x=&quot;Sample&quot;, y=&quot;Somatic&quot;, kind=&quot;bar&quot;, data=var_counts, order=labels); # keeps x-axis labels, but eliminates the tick mark plt.tick_params(labelbottom=True, bottom=False) # trim off the x-axis sns.despine(offset=10, trim=True, bottom=True) # labels plt.title(&#39;&#39;) plt.ylabel(&#39;&#39;, fontsize=8) plt.xlabel(&#39;&#39;, fontsize=8) # manual control of xlabels labels = [&#39;Indiv_1-a&#39;,&#39;Indiv_2&#39;,&#39;Indiv_3&#39;,&#39;Indiv_1-b&#39;] # control xtick order plt.xticks(range(len(labels)), labels, rotation=45) # control the number of x-ticks plt.locator_params(axis=&#39;x&#39;, nbins=10) # legend positioning plt.legend(loc=&#39;upper right&#39;) # log scale plt.gca().set_yscale(&#39;log&#39;) # this is better if neg values are needed plt.gca().set_yscale(&#39;symlog&#39;) # fit plot to display plt.tight_layout() plt.show() # save figure with tight_layout plt.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;, bbox_inches=&quot;tight&quot;, dpi=1000) Signifance information can be added by including p-values and label bars using the following code. x1, x2 = 0, 1 # columns to annotate on the plot y2, y1 = 20, 15 # placement of the line and how for down the vertical legs go plt.plot([x1,x1, x2, x2], [y1, y2, y2, y1], linewidth=1, color=&#39;k&#39;) # stats line plt.text((x1+x2)*.5, y2+2, &quot;p=0.09&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, fontsize=8) # p-value or sig 4.4 Statistics This is a two-sided T-test for the null hypothesis that two populations have the same means. It is important to note that it assumes the population variances are the same, so this must be changed if the assumption is incorrect. # ttest_ind(a, b, axis=0, equal_var=True, nan_policy=&#39;propagate&#39;) from scipy.stats import ttest_ind ttest_ind(df[df[&#39;sample&#39;] == &#39;one&#39;][&#39;means&#39;], df[df[&#39;sample&#39;] == &#39;two&#39;][&#39;means&#39;]) 4.5 Various Plot Styles This displays each individual datapoint overlayed on a boxplot ax = sns.boxplot(x=&#39;day&#39;, y=&#39;total_bill&#39;, data=tips) ax = sns.swarmplot(x=&#39;day&#39;, y=&#39;total_bill&#39;, data=tips, color=&#39;.25&#39;) "],
["biology.html", "Chapter 5 Biology 5.1 General 5.2 Biopython 5.3 UCSC Genome Browser 5.4 Ref Genome 5.5 Personal Information", " Chapter 5 Biology 5.1 General Some helpful commands for genetic sequence. from string import ascii_uppercase # python 3 from string import upper, lower # python 2 upper(&#39;tcga&#39;) lower(&#39;TCGA&#39;) title(&#39;tcga&#39;) # capitalize the first letter 5.2 Biopython Reverse complement of sequence from Bio.Seq import Seq str(Seq(i).reverse_complement()) 5.3 UCSC Genome Browser Get sequence from UCSC genome browser from subprocess import check_output, STDOUT temp = check_output(&#39;wget -qO- http://genome.ucsc.edu/cgi-bin/das/hg19/dna?segment=%s:%s,%s&#39; % (vcfObj.chrom,low,high), stderr=STDOUT, shell=True) 5.4 Ref Genome Get sequence from reference genome from subprocess import check_output, STDOUT temp = check_output(&#39;samtools faidx %s %s:%s-%s&#39; % (ref, vcfObj.chrom, low, high), stderr=STDOUT, shell=True) finalSeq = &#39;&#39; for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): # this is only necessary in python 3 to convert binary to string if &#39;&gt;&#39; not in line: finalSeq += line finalSeq = finalSeq.upper() 5.5 Personal Information # parse vcf file with parseline if &#39;#&#39; not in line and &#39;chr&#39; in line: # skip the info # vcf handling from parseline import VCFObj # or from util import VCFObj vcfObj = VCFObj(vcfLine) # available attributes: ao, dp, af, wt, var, chrom, location "],
["io.html", "Chapter 6 Data I/O 6.1 Reading Data Files 6.2 Pickles", " Chapter 6 Data I/O 6.1 Reading Data Files Opening .gz files import gzip for line in gzip.open(&#39;myFile.gz&#39;): print line 6.2 Pickles Writing data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;wb&#39;) pickle.dump(principleData, p) p.close() Reading data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;rb&#39;) principleData = pickle.load(p) p.close() "],
["pandas.html", "Chapter 7 Pandas 7.1 File I/O 7.2 Relabeling 7.3 Sorting and Arranging 7.4 Editing Data 7.5 Combining Data Structures 7.6 Splitting 7.7 Summarizing 7.8 Arithmetic and Row-wise Analysis", " Chapter 7 Pandas 7.1 File I/O Read a csv file into a DataFrame. pd.read_csv(filepath) Write a DataFrame to a file. x.to_csv(path_or_buf=&#39;outputDir&#39;, sep=&#39;\\n&#39;, header=False, index=False) 7.2 Relabeling Rename a column or group of columns can be done by passing a dictionary of the changes. df = df.rename(columns={&#39;a&#39;:&#39;b&#39;,&#39;c&#39;:&#39;d&#39;}) 7.3 Sorting and Arranging The data in a DataFrame can be sorted in numeric or lexicographic order. The following code sorts the values within the columns a and b. df.sort_values([&#39;a&#39;,&#39;b&#39;], ascending=False) 7.4 Editing Data Drop columns from a DataFrame. import numpy as np df = pd.DataFrame(np.arange(12).reshape(3,4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]) print(df) df = df.drop(columns=[&#39;B&#39;, &#39;C&#39;]) # may not work in python 2 df = df.drop([&#39;B&#39;, &#39;C&#39;], axis=1) # this works in python 2 print(df) Changing the datatype of a column of data can be done by just changing column type. df.Age = df.Age.astype(str) 7.4.1 Replace values New data can be set within a DataFrame one subset at a time in a way that will avoid the SettingWithCopyWarning. import pandas as pd df = pd.DataFrame({&#39;Trait&#39;:[&#39;Seed_Shape&#39;,&#39;Seed_Shape&#39;,&#39;Flower_Color&#39;,&#39;Flower_Color&#39;], &#39;Phenotype&#39;:[&#39;Round&#39;,&#39;Wrinkled&#39;,&#39;Purple&#39;,&#39;White&#39;]}) df.loc[df.Trait == &#39;Seed_Shape&#39;, &#39;Affected_Part&#39;] = &#39;Seed&#39; df.loc[df.Trait == &#39;Flower_Color&#39;, &#39;Affected_Part&#39;] = &#39;Flower&#39; print(df) ## Trait Phenotype Affected_Part ## 0 Seed_Shape Round Seed ## 1 Seed_Shape Wrinkled Seed ## 2 Flower_Color Purple Flower ## 3 Flower_Color White Flower There is a more simple alternative to the above method buit it may result in the SettingWithCopyWarning. df = df.replace(&#39;pork&#39;,&#39;bacon&#39;) 7.5 Combining Data Structures The following merges df and df2 using inner to get the intersection on the Sample column, where indexes are ignored if the merging is performed on a column as in the following example. The other possible merging strategies are: left: use only keys from left frame, similar to a SQL left outer join; preserve key order. right: use only keys from right frame, similar to a SQL right outer join; preserve key order. outer: use union of keys from both frames, similar to a SQL full outer join; sort keys lexicographically. inner: use intersection of keys from both frames, similar to a SQL inner join; preserve the order of the left keys. df = pd.merge(df, df2, how=&#39;inner&#39;, on=[&#39;Sample&#39;]) Appending to a Dataframe attaches a DataFrame after another one. df = pd.DataFrame([[1, 2], [3, 4]], columns=list(&#39;AB&#39;)) df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list(&#39;AB&#39;)) df.append(df2) 7.6 Splitting Remove duplicates x = x[~x.index.duplicated(keep=&#39;first&#39;)] # most ideal method data = pd.DataFrame({&#39;k1&#39;:[&#39;one&#39;,&#39;two&#39;]*3+[&#39;two&#39;],&#39;k2&#39;:[1,1,2,3,3,4,4]}) data.duplicated() # identify duplicate data data[â€˜k1â€™].duplicated() data[&#39;k1&#39;].drop_duplicates() data.drop_duplicates[&#39;k1&#39;] # this does the same thing as the previous line data.drop_duplicates([&#39;k1&#39;,&#39;k2&#39;], keep=&#39;last&#39;) # drops unique found in k1 and k2 and keeps the last indexed duplicate 7.7 Summarizing The mean of column values can be calculated where each of the columns is grouped by the data in a specified column. temp[[&#39;Sample&#39;,&#39;VAF&#39;,&#39;Var_Count&#39;]].groupby(&#39;Sample&#39;).mean() 7.8 Arithmetic and Row-wise Analysis Sometimes it is helpful to analyze the value in a particular cell in a conditional manner depending on itâ€™s value and then set the result of this analysis to a corresponding cell in a new column. Here is an example where the VAF of a variant is conditionally analyzed def LOH(x): if x &gt; 0.75: return 1 - x elif x &lt;= 0.75 and x &gt; 0.25: return abs(0.5 - x) else: return 0 all_vars[&#39;LOH&#39;] = all_vars.VAF.transform(LOH) max_loh = all_vars.groupby(&#39;Sample&#39;).LOH.max().reset_index().rename(columns={&#39;LOH&#39;:&#39;Max_LOH&#39;}) all_vars = pd.merge(all_vars, max_loh, how=&#39;inner&#39;, on=[&#39;Sample&#39;]) "],
["git.html", "Chapter 8 Git 8.1 Setup 8.2 Manipulating Commits", " Chapter 8 Git 8.1 Setup 8.1.1 Git Setup The username and email needs to be added after git is installed. git config --global user.name &quot;me&quot; git config --global user.email &quot;me@gmail.com&quot; After this information has been set, it can be checked. git config --list 8.1.2 Repository Initiation To setup a repository, create a folder with an initial file like a README and then initiate it. git init git status 8.1.3 Mirror on Online Repository Create a repository on a repository like github, gitlab, bitbucket, or sourceforge. Then the local git repository can be synched with the online repository. git remote add origin url-of-online-repository-here git push -u origin master Of course the repository could just be setup first and then cloned. git clone url-of-online-repository-here 8.2 Manipulating Commits 8.2.1 Repository Status The commit history of a repository can be displayed in verbose form and in summarized form. git log git log --oneline 8.2.2 File Checkout To restore a previous version of a file it can be checked out by first identifying the version to be used using the log history and then restoring the desired file. git log --oneline git checkout &lt;commit number&gt; file.txt 8.2.3 Resetting a Repository To discard the effect of the previous operation on a file. git reset HEAD file.txt The previous version of the a file can then be restored. git checkout -- file.txt "],
["vim.html", "Chapter 9 VIM 9.1 Formatting 9.2 Spellcheck", " Chapter 9 VIM 9.1 Formatting Automatic newlines are inserted by default; this behavior can be overidden with the following. :set wrap :set textwidth=0 wrapmargin=0 9.2 Spellcheck To setup spellchecking first setup a personal dictionary file. mkdir -p ~/.vim/spell/ # makes a directory for personal dictionary Then refer to the dictionary file within VIM, and enable spellchecking. # set personal dictionary :set spellfile=~/.vim/spell/en.utf-8.add # turn spellcheck on :set spell Get spellcheck commands. :help spell Add a word to personal dictionary. zg Move to next and previous misspelled word. ]s [s Get suggestions for misspelled word. z= "],
["references.html", "References", " References "]
]
